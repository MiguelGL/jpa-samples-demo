/**
 * This class is generated by jOOQ
 */
package com.mgl.jpa.mapping.samples.jooq.tables.daos;


import com.mgl.jpa.mapping.samples.jooq.tables.Userprofile;
import com.mgl.jpa.mapping.samples.jooq.tables.records.UserprofileRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserprofileDao extends DAOImpl<UserprofileRecord, com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile, Long> {

    /**
     * Create a new UserprofileDao without any configuration
     */
    public UserprofileDao() {
        super(Userprofile.USERPROFILE, com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile.class);
    }

    /**
     * Create a new UserprofileDao with an attached configuration
     */
    public UserprofileDao(Configuration configuration) {
        super(Userprofile.USERPROFILE, com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>userKind IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByUserkind(String... values) {
        return fetch(Userprofile.USERPROFILE.USERKIND, values);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchById(Long... values) {
        return fetch(Userprofile.USERPROFILE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile fetchOneById(Long value) {
        return fetchOne(Userprofile.USERPROFILE.ID, value);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByVersion(Long... values) {
        return fetch(Userprofile.USERPROFILE.VERSION, values);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByCity(String... values) {
        return fetch(Userprofile.USERPROFILE.CITY, values);
    }

    /**
     * Fetch records that have <code>street IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByStreet(String... values) {
        return fetch(Userprofile.USERPROFILE.STREET, values);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByEmail(String... values) {
        return fetch(Userprofile.USERPROFILE.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile fetchOneByEmail(String value) {
        return fetchOne(Userprofile.USERPROFILE.EMAIL, value);
    }

    /**
     * Fetch records that have <code>firstName IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByFirstname(String... values) {
        return fetch(Userprofile.USERPROFILE.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastName IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByLastname(String... values) {
        return fetch(Userprofile.USERPROFILE.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>company_id IN (values)</code>
     */
    public List<com.mgl.jpa.mapping.samples.jooq.tables.pojos.Userprofile> fetchByCompanyId(Long... values) {
        return fetch(Userprofile.USERPROFILE.COMPANY_ID, values);
    }
}
