/**
 * This class is generated by jOOQ
 */
package com.mgl.jpa.mapping.samples.jooq.tables;


import com.mgl.jpa.mapping.samples.jooq.Jpa;
import com.mgl.jpa.mapping.samples.jooq.Keys;
import com.mgl.jpa.mapping.samples.jooq.tables.records.CompanyRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 1649697435;

    /**
     * The reference instance of <code>jpa.Company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>jpa.Company.id</code>.
     */
    public final TableField<CompanyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jpa.Company.version</code>.
     */
    public final TableField<CompanyRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>jpa.Company.creationTs</code>.
     */
    public final TableField<CompanyRecord, Timestamp> CREATIONTS = createField("creationTs", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jpa.Company.lastModificationTs</code>.
     */
    public final TableField<CompanyRecord, Timestamp> LASTMODIFICATIONTS = createField("lastModificationTs", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jpa.Company.city</code>.
     */
    public final TableField<CompanyRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jpa.Company.street</code>.
     */
    public final TableField<CompanyRecord, String> STREET = createField("street", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jpa.Company.email</code>.
     */
    public final TableField<CompanyRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>jpa.Company.firstName</code>.
     */
    public final TableField<CompanyRecord, String> FIRSTNAME = createField("firstName", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jpa.Company.lastName</code>.
     */
    public final TableField<CompanyRecord, String> LASTNAME = createField("lastName", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jpa.Company.organisationName</code>.
     */
    public final TableField<CompanyRecord, String> ORGANISATIONNAME = createField("organisationName", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * Create a <code>jpa.Company</code> table reference
     */
    public Company() {
        this("Company", null);
    }

    /**
     * Create an aliased <code>jpa.Company</code> table reference
     */
    public Company(String alias) {
        this(alias, COMPANY);
    }

    private Company(String alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Company(String alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jpa.JPA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompanyRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMPANY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.KEY_COMPANY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompanyRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyRecord>>asList(Keys.KEY_COMPANY_PRIMARY, Keys.KEY_COMPANY_COMPANY__EMAIL_UIDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<CompanyRecord, Long> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Company as(String alias) {
        return new Company(alias, this);
    }

    /**
     * Rename this table
     */
    public Company rename(String name) {
        return new Company(name, null);
    }
}
