/**
 * This class is generated by jOOQ
 */
package com.mgl.jpa.mapping.samples.jooq.tables;


import com.mgl.jpa.mapping.samples.jooq.Jpa;
import com.mgl.jpa.mapping.samples.jooq.Keys;
import com.mgl.jpa.mapping.samples.jooq.tables.records.DocumentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Document extends TableImpl<DocumentRecord> {

    private static final long serialVersionUID = 939376527;

    /**
     * The reference instance of <code>jpa.Document</code>
     */
    public static final Document DOCUMENT = new Document();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentRecord> getRecordType() {
        return DocumentRecord.class;
    }

    /**
     * The column <code>jpa.Document.documentKind</code>.
     */
    public final TableField<DocumentRecord, String> DOCUMENTKIND = createField("documentKind", org.jooq.impl.SQLDataType.VARCHAR.length(31).nullable(false), this, "");

    /**
     * The column <code>jpa.Document.id</code>.
     */
    public final TableField<DocumentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jpa.Document.version</code>.
     */
    public final TableField<DocumentRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>jpa.Document.pagesCnt</code>.
     */
    public final TableField<DocumentRecord, Integer> PAGESCNT = createField("pagesCnt", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jpa.Document.title</code>.
     */
    public final TableField<DocumentRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>jpa.Document.url</code>.
     */
    public final TableField<DocumentRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>jpa.Document.filePath</code>.
     */
    public final TableField<DocumentRecord, String> FILEPATH = createField("filePath", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * Create a <code>jpa.Document</code> table reference
     */
    public Document() {
        this("Document", null);
    }

    /**
     * Create an aliased <code>jpa.Document</code> table reference
     */
    public Document(String alias) {
        this(alias, DOCUMENT);
    }

    private Document(String alias, Table<DocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Document(String alias, Table<DocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jpa.JPA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DocumentRecord, Long> getIdentity() {
        return Keys.IDENTITY_DOCUMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DocumentRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentRecord>>asList(Keys.KEY_DOCUMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<DocumentRecord, Long> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Document as(String alias) {
        return new Document(alias, this);
    }

    /**
     * Rename this table
     */
    public Document rename(String name) {
        return new Document(name, null);
    }
}
